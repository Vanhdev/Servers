function $tag(selector, tagname) {

    let tag = $(selector ?? document.createElement(tagname));

    tag.tagValue = function (name, value) {
        if (value != null) {
            this.attr(name, value);
            return this;
        }
        return this.attr(name);
    }
    tag.tagData = function (name, value) {
        if (value != null) {
            this.data(name, value);
            return this;
        }
        return this.data(name);
    }
    tag.id = function (value) { return this.tagValue("id", value) }

    return tag;
}
function $div(cls) { return $tag(null, "div").addClass(cls) }
function $row() { return $div("row") }

function $form(selector) {
    let frm = $tag(selector, "form");
    let btn = $button(null).html("OK")
        .attr("onclick", "return false");

    frm.validate = function (data) {
        return data;
    }
    btn.click(function () {
        let data = frm.val();

        if (data) {
            if (!(data = frm.validate(data))) return;

            let url = frm.attr("data-api");
            if (url) {
                api.post(url, data);
                return;
            }

            for (const key in editors) {
                editors[key].attr("name", "");
            }

            $textBox()
                .attr("name", "stringContext")
                .val(JSON.stringify(data))
                .hide()
                .appendTo(frm);

            frm.submit();
        }
    })

    let editors = {};

    frm.init = function (info) {
        let sections = info.sections;
        if (!sections) {
            sections = [
                { fields: info.fields }
            ]
        }
        let layout = $div().appendTo(this);
        for (const section of sections) {
            let sec = $div()
                .appendTo(layout)
                .addClass("form-section")
                .html("<h6 class='section-text'>" + (section.text ?? "") + "</h6>")

            let row = $row().appendTo(sec);
            for (const field of section.fields) {
                let input = window["$" + (field.input ?? "text") + "Box"]()
                    .addClass("form-control")
                    .name(field.name)
                    .caption(field.caption)
                    .required(field.required ?? true)

                if (input.options && field.options) {
                    input.options(field.options);
                }

                let group = $div("input-group mb-3")
                    .addClass(field.className ?? "col-lg-12")
                    .appendTo(row);

                if (field.iconName) {
                    group.append("<div class='input-group-prepend'>"
                        + "<div class='input-group-text'>"
                        + "<i class='fa fa-" + field.iconName + "'></i>"
                        + "</div></div>")
                }
                group.append(input)
                if (field.required != false) {
                    let rq = "input-required";
                    group.addClass(rq)

                    input.checkRequired = function () {
                        input.val() ? group.removeClass(rq)
                            : group.addClass(rq);
                    }
                    input.change(function () {
                        input.checkRequired();
                    })
                }

                editors[field.name] = input;
            }
        }

        return this.append($("<div/>").append(btn));
    }
    frm.val = function (data) {
        if (!data) {
            data = {}
            for (const key in editors) {
                let e = editors[key];
                let v = e.val();
                if (!v) {
                    if (e.attr("required") != null) {
                        e.focus();
                        return null;
                    }
                    continue;
                }

                data[key] = v;
            }
            return data;
        }

        for (const key in editors) {
            let e = editors[key];
            e.val(data[key] ?? "");

            if (e.checkRequired) {
                e.checkRequired();
            }
        }
        return frm;
    }
    frm.card = function (cls, outline) {

        if (!cls) { cls = "primary" };

        $card(this.first(), cls, outline)
        btn.addClass("btn-" + cls);
        return this;
    }
    frm.editor = function (key) {
        return editors[key];
    }
    return frm;
}
function $editor(tagName) {
    let node = document.createElement(tagName);
    let inp = $tag(node)

    inp.name = function (s) {
        if (s == null) {
            return node.name;
        }
        node.name = s;
        node.id = s;
        return this;
    }
    inp.required = function (b) {
        if (b == null) {
            return node.required == true;
        }
        node.required = b;
        return this;
    }

    inp.getValue = function () {
        return node.value;
    }
    inp.setValue = function (v) {
        node.value = v;
        return this;
    }

    inp.getDisplayValue = function (v) {
        return v;
    }
    inp.getEditedValue = function (v) {
        return v;
    }

    inp.val = function (v) {
        if (v != null) {
            this.setValue(this.getDisplayValue(v))
            return this;
        }
        return this.getEditedValue(this.getValue());
    }

    return inp;
}
function $textBox(type) {
    let inp = $editor("input")
        .attr("type", type ?? "text");

    inp.placeholder = function (s) {
        return this.tagValue("placeholder", s)
    }
    inp.caption = function (text) {
        return this.placeholder(text)
    }
    return inp;
}
function $numberBox() {
    return $textBox("number");
}
function $passwordBox() {
    return $textBox("password")
}
function $timeBox(format) {
    let inp = $textBox();

    inp.caption = function (s) {
        let v = format ?? "HH:mm:ss";
        if (s) {
            v = s + ' (' + v + ')'
        }
        return this.placeholder(v)
    }
    inp.correct = function (s) {
        let v = s.replaceAll(' ', ':').split(':');
        let t = [];
        let i = 0;
        for (const s of v) {
            t.push(parseInt(s));
            if (t.length == 3) { break }
        }

        for (let i = t.length; i < 2; i++) {
            t.push(0);
        }

        for (let i = 0; i < t.length; i++) {
            if (t[i] < 0) { t[i] = 0; }
            else if (t[i] >= 60) { t[i] = 59; }
        }
        t[0] %= 24;

        for (i = 0; i < t.length; i++) {
            let v = t[i];
            t[i] = (v < 10 ? '0' : '') + v;
        }
        return t.join(':');
    }
    inp.change(function () {
        let s = this.value.trim();
        if (s) {
            s = inp.correct(s);
        }
        this.value = s;
    })

    return inp;
}
function $minuteBox() {
    console.log("create minute editor")
    return $timeBox("HH:mm");
}
function $dateBox() {
    let inp = $timeBox("dd/mm/yyyy");
    inp.correct = function (s) {
        let today = new Date();
        let v = s.replaceAll(' ', '/')
            .replaceAll('.', '/')
            .replaceAll('-', '/')
            .split('/');

        if (v.length < 2) {
            var m = today.getMonth() + 1;
            v[1] = m < 10 ? '0' + m : m;
        }
        if (v.length < 3) {
            v[2] = today.getFullYear();
        }
        if (v[0].length < 2) { v[0] = '0' + v[0]; }
        if (v[1].length < 2) { v[1] = '0' + v[1]; }

        var y = parseInt(v[2]);
        if (y < 30) {
            v[2] = y + 2000;
        } else if (y < 100) {
            v[2] = y + 1900;
        }
        return (v.join('/'));
    }

    inp.getDisplayValue = function (v) {
        let t = v.split('-');
        return [t[2], t[1], t[0]].join('/');
    }
    inp.getEditedValue = function (v) {
        var t = v.trim().split('/');
        if (!t[0]) return "";

        return [t[2],t[1],t[0]].join('-');
    }
    return inp;
}
function $checkBox() {
    let inp = document.createElement("input");
    let label = $(document.createElement("label"))
        .click(function () { label.trigger() })

    let div = $div("input-check-box")
;
    let checker = $div().html("<div/>")
        .click(function () { label.trigger() })

    label.trigger = function () {
        div.val(inp.checked ^ true);
        div.trigger("change", inp.checked);
    }

    inp.type = "checkbox";
    div.val = function (v) {
        let chk = "checked";
        if (v == null) {
            return checker.hasClass(chk);
        }
        inp.checked = v;

        checker.removeClass(chk);
        if (v) { checker.addClass(chk) }
    }
    div.append(checker, inp, label)

    div.caption = function (text) {
        label.html(text);
        return this;
    }
    div.required = function () { return this; }
    div.name = function (s) {
        inp.name = s;
        div.attr("id", s);
        return this;
    }
    return div;
}
function $radioBox() {
    let inp = document.createElement("input");
    let label = document.createElement("label")

    let div = $editor("div").addClass("input-radio-box");
    let ul = $("<ul/>")

    inp.hidden = true;
    div.append(label, inp, ul);

    div.options = function (context) {
        let items = [];
        if (typeof context === "string") {
            items = context.split(';')
        } else {
            items = context;
        }
        for (const s of items) {

            let li = $("<li><span><i></i></span>" + s + "</li>");
            ul.append(li);

            li.click(function () {
                if (li.hasClass("active")) { return; }
                ul.find(".active").first().removeClass("active");
                li.addClass("active");

                let v = li.attr("value");
                if (!v) {
                    v = this.innerText;
                }
                inp.value = v;

                div.trigger("change", v);

            })
        }
        return this;
    }
    div.values = function (context) {
        let items = [];
        let i = 0;
        if (typeof context === "string") {
            items = context.split(';')
        } else {
            items = context;
        }
        ul.children().each(function () {
            this.value = items[i++];
        }).first().click()

        return this;
    }
    div.caption = function (text) {
        if (text == null) {
            return label.innerHTML;
        }
        label.innerHTML = text;
        return this;
    }
    div.name = function (s) {
        if (s == null) {
            return div.attr("id")
        }
        inp.name = s;
        div.attr("id", s);
        return this;
    }
    div.required = function () { return this; }

    div.getValue = function () {
        return inp.value;
    }
    div.setValue = function (v) {
        inp.value = v;
        ul.children().each(function () {
            this.className = v == this.value ? "active" : "";
        })
    }

    return div;
}
function $selectBox() {
    let inp = $editor("select")
    let caption = "";
    inp.caption = function (text) {
        caption = text;
        return this;
    }
    inp.options = function (values) {
        let items = [];
        if (typeof values === "string") {
            items = values.split(';')
        }
        if (!items[0] && caption) {
            this.append('<option value="">(' + caption + ')</option>');
            items.splice(0, 1);
        }
        for (const s of items) {
            inp.append("<option>" + s + "</option>")
                .attr("value", s);
        }
        return this;
    }

    inp.values = function (context) {
        let items = [];
        let i = 0;
        if (typeof context === "string") {
            items = context.split(';')
        } else {
            items = context;
        }
        inp.children().each(function () {
            this.value = items[i++];
        })

        return this;
    }

    return inp;
}
function $multilineBox() {
    let inp = document.createElement("div");
    let label = document.createElement("label")

    let div = $editor("div").addClass("input-multiline-box");

    inp.contentEditable = true;
    inp.className = "multiline-content"

    div.append(label, inp);

    div.caption = function (text) {
        if (text == null) {
            return label.innerHTML;
        }
        label.innerHTML = text;
        return this;
    }
    div.name = function (s) {
        if (s == null) {
            return div.attr("id")
        }
        inp.name = s;
        div.attr("id", s);
        return this;
    }
    div.required = function (b) {
        if (b == null) {
            return true;
        }
        if (b) {
            inp.setAttribute("required", true)
        } else {
            inp.removeAttribute("required")
        }
        return this;
    }

    div.getValue = function () {
        return inp.innerHTML;
    }
    div.setValue = function (v) {
        inp.innerHTML = v;
    }

    return div;

}

function $button(selector, cls) {
    btn = $tag(selector, "button").addClass("btn");
    if (cls) { btn.addClass("btn-" + cls) }

    btn.icon = function (cls, fa) {
        this.append($icon(cls, fa));
        return this;
    }
    return btn;
}
function $anchor(selector) {
    let a = $tag(selector, "a");

    a.href = function (s) { return a.tagValue("href", s); }
    a.icon = function (cls, fa) {
        this.append($icon(cls, fa));
        return this;
    }
    a.button = function (cls) {
        this.addClass("btn").addClass("btn-" + cls);
        return this;
    }
    return a;
}
function $icon(cls, fa) {
    let icon = document.createElement("i");
    icon.className = (fa ?? "fa") + " fa-" + cls;

    return $(icon);
}
function $card(selector, cls, outline) {
    let card = $tag(selector, "div").addClass("card")

    card.each(function() {
        if (cls) { this.classList.add("card-" + cls) }
        if (outline) { this.classList.add("card-outline") }

        let header = $(this.firstElementChild).addClass("card-header");
        let body = header.next().addClass("card-body");
        body.next().addClass("card-footer");
    })
    card.tools = function () {
        let header = card.first().children().first();
        let tools = header.find(".card-tools");
        if (tools) {
            tools = $div("card-tools");
            header.append(tools);
        }

        return tools;
    }
    return card;
}
function $tabs(selector, cls, handle) {
    let card = $card(selector, cls).first();

    card.addClass("card-tabs");
    card.active = function (node) {

        if (current) {
            card.deactive(current);
        }

        node.classList.add("active");
        node.content?.show();

        current = node;
        if (handle) {
            handle(node, node.getAttribute("data-target"));
        }
    }
    card.deactive = function (node) {
        node.classList.remove("active");
        node.content?.hide();
    }

    let header = card.children().first();

    header.addClass("p-0 pt-1").attr("style","potision:relative")
    let nav = $(document.createElement("ul")).addClass("nav nav-tabs");
    let current = null;

    header.children().each(function () {
        let a = $(this)
        this.className = "nav-link";

        if (!a.attr("href")) { a.attr("href", "#") }
        nav.append($("<li class='nav-item'></li>").append(this));

        a.click(function () {
            if (a.hasClass("active")) {
                return;
            }
            card.active(this)
        })

        let target = a.data("target");
        if (target) {
            this.content = $(target).hide();
        }

        if (!current) { card.active(this); }
    })
    header.append(nav);

    card.select = function (index, handle) {
        let i = 0;
        nav.find("a").each(function () {
            if (i == index) {
                card.active(this);

                if (handle) {
                    handle(this);
                }
            }
            i++;
        })
        return this;
    }
    return card;
}
function $search(selector) {
    let bar = $tag(selector, "div");
    bar.addClass("search-bar")
        .html("<form>"
            + "<button><i class='fa fa-search'></i></button>"
            + "<input name='search' />"
            + "</form>");

    bar.comment = function (s) {
        bar.find("input").attr("placeholder", s);
        return this;
    }

    return bar;
}

function $temp(selector) {
    let form = $(selector)

    form.render = function (data, clone) {
        let frm = clone != false ? form.clone(false) : form;
        frm.find(".field").each(function () {
            let e = $(this)
            let v = data[e.data("name")];
            if (v) {
                v = converter.format(e.data("format"), v);
            }
            e.html(v ?? "");
        })
        return frm;
    }

    return form;
}


/*************** API ***************/
class ApiCaller {
    constructor(url, data) {
        this.url = url;

        if (!data) { data = "{}" }
        this.content = (typeof data === "string" ? data : JSON.stringify(data));
    }
    post(callback) {
        var http = new XMLHttpRequest();
        http.onload = function () {
            var e = JSON.parse(http.response);
            if (callback) {
                callback(e);
            }
        }

        http.open('POST', this.url)
        http.setRequestHeader('Content-type', 'application/json')
        http.send(this.content) // Make sure to stringify
    }
}

let api = {
    url: "/api/common",
    device: null,
    post: function (action, value) {

        let data = {
            '#server': session.get("server"),
            '#url': action,
        };

        let token = session.get("token");
        if (token) {
            data["#token"] = token;
        }
        if (value) {
            data.value = value;
        }
        if (this.device) {
            data["#deviceId"] = this.device._id;
        }

        var engine = new ApiCaller(this.url, data);
        engine.post(api.onresponse);
    },
    onresponse: function (e) {
        if (e.code) {
            api.onerror(e.code, e.message);
            return;
        }

        api.onsuccess(e.value, e.message);
    },
    onerror: function (code, message) {
        toastr.error(message);
    },
    onsuccess: function (value, message) {
        toastr.success(message ?? "Cập nhật thành công");
    }
}

/*************** STORAGE ***************/
let cookie = {
    set: function (name, value, exdays) {
        const d = new Date();
        d.setTime(d.getTime() + ((exdays ?? 1) * 24 * 60 * 60 * 1000));

        let expires = "expires=" + d.toUTCString();
        let cvalue = (typeof value === "string" ? value : JSON.stringify(value));
        document.cookie = name + "=" + cvalue + ";" + expires + ";path=/";
    },
    get: function (name) {
        let cname = name + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(cname) == 0) {
                let s = c.substring(cname.length, c.length);
                return s;
            }
        }
        return "";
    },
    getObject: function (name, callback) {
        let o = this;
        let s = this.get(name);

        if (s) {
            try {
                o = JSON.parse(s);
                console.log(o);
            } catch {
            }
        }

        if (callback) { callback(o) }
        return o;
    },
    remove: function (name) {
        document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
}

let session = {
    set: function (name, value) {
        let data = (typeof value === "string" ? value : JSON.stringify(value));
        sessionStorage.setItem(name, data);
    },
    get: function (name) {
        return sessionStorage.getItem(name);
    },
    getObject: function (name, callback) {
        let s = sessionStorage.getItem(name);
        let o = !s ? {} : JSON.parse(s);

        if (callback) { callback(o) }
        return o;
    },
    getArray: function (name, callback) {
        let s = sessionStorage.getItem(name);
        let a = !s ? [] : JSON.parse(s);

        if (callback) { callback(a) }
        return a;

    },
    start: function (mins) {
        if (!mins) { mins = 20; }
        setTimeout(() => {
            alert("Hết phiên làm việc");
            session.end();
        }, mins * 60 * 1000);
    },
    end: function () {
        sessionStorage.removeItem("#token");
        api.post("account/logout");
        redirect("/login");
    }
}

/**************** DIALOGS **************/

function redirect(url) {
    window.location.href = url;
}
